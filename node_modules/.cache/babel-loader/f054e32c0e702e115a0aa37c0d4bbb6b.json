{"ast":null,"code":"var _jsxFileName = \"/Users/raymondwu/Downloads/ramp-fe-challenge/src/components/Transactions/TransactionPane.tsx\";\nimport { InputCheckbox } from \"../InputCheckbox\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TransactionPane = _ref => {\n  var _approvedState$transa;\n\n  let {\n    transaction,\n    loading,\n    setTransactionApproval: consumerSetTransactionApproval,\n    approvedState,\n    setApprovedState\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"RampPane\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"RampPane--content\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"RampText\",\n        children: [transaction.merchant, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n        children: moneyFormatter.format(transaction.amount)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"RampText--hushed RampText--s\",\n        children: [transaction.employee.firstName, \" \", transaction.employee.lastName, \" - \", transaction.date]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputCheckbox, {\n      id: transaction.id,\n      checked: (_approvedState$transa = approvedState[transaction.id]) !== null && _approvedState$transa !== void 0 ? _approvedState$transa : transaction.approved,\n      disabled: loading,\n      onChange: async newValue => {\n        await consumerSetTransactionApproval({\n          transactionId: transaction.id,\n          newValue\n        });\n        setApprovedState(prevState => ({ ...prevState,\n          [transaction.id]: newValue\n        }));\n      }\n    }, transaction.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n};\n_c = TransactionPane;\nconst moneyFormatter = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\"\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionPane\");","map":{"version":3,"names":["InputCheckbox","TransactionPane","transaction","loading","setTransactionApproval","consumerSetTransactionApproval","approvedState","setApprovedState","merchant","moneyFormatter","format","amount","employee","firstName","lastName","date","id","approved","newValue","transactionId","prevState","Intl","NumberFormat","style","currency"],"sources":["/Users/raymondwu/Downloads/ramp-fe-challenge/src/components/Transactions/TransactionPane.tsx"],"sourcesContent":["import { InputCheckbox } from \"../InputCheckbox\"\nimport { TransactionPaneComponent } from \"./types\"\n\nexport const TransactionPane: TransactionPaneComponent = ({\n  transaction,\n  loading,\n  setTransactionApproval: consumerSetTransactionApproval,\n  approvedState,\n  setApprovedState,\n}) => {\n\n  return (\n    <div className=\"RampPane\">\n      <div className=\"RampPane--content\">\n        <p className=\"RampText\">{transaction.merchant} </p>\n        <b>{moneyFormatter.format(transaction.amount)}</b>\n        <p className=\"RampText--hushed RampText--s\">\n          {transaction.employee.firstName} {transaction.employee.lastName} - {transaction.date}\n        </p>\n      </div>\n      <InputCheckbox\n        key={transaction.id}\n        id={transaction.id}\n        checked={approvedState[transaction.id] ?? transaction.approved}\n        disabled={loading}\n        onChange={async (newValue) => {\n          await consumerSetTransactionApproval({\n            transactionId: transaction.id,\n            newValue,\n          })\n\n          setApprovedState((prevState) => ({\n            ...prevState, [transaction.id]: newValue,\n          }))\n        }}\n      />\n    </div>\n  )\n}\n\nconst moneyFormatter = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n})\n"],"mappings":";AAAA,SAASA,aAAT,QAA8B,kBAA9B;;AAGA,OAAO,MAAMC,eAAyC,GAAG,QAMnD;EAAA;;EAAA,IANoD;IACxDC,WADwD;IAExDC,OAFwD;IAGxDC,sBAAsB,EAAEC,8BAHgC;IAIxDC,aAJwD;IAKxDC;EALwD,CAMpD;EAEJ,oBACE;IAAK,SAAS,EAAC,UAAf;IAAA,wBACE;MAAK,SAAS,EAAC,mBAAf;MAAA,wBACE;QAAG,SAAS,EAAC,UAAb;QAAA,WAAyBL,WAAW,CAACM,QAArC;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAA,UAAIC,cAAc,CAACC,MAAf,CAAsBR,WAAW,CAACS,MAAlC;MAAJ;QAAA;QAAA;QAAA;MAAA,QAFF,eAGE;QAAG,SAAS,EAAC,8BAAb;QAAA,WACGT,WAAW,CAACU,QAAZ,CAAqBC,SADxB,OACoCX,WAAW,CAACU,QAAZ,CAAqBE,QADzD,SACsEZ,WAAW,CAACa,IADlF;MAAA;QAAA;QAAA;QAAA;MAAA,QAHF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAQE,QAAC,aAAD;MAEE,EAAE,EAAEb,WAAW,CAACc,EAFlB;MAGE,OAAO,2BAAEV,aAAa,CAACJ,WAAW,CAACc,EAAb,CAAf,yEAAmCd,WAAW,CAACe,QAHxD;MAIE,QAAQ,EAAEd,OAJZ;MAKE,QAAQ,EAAE,MAAOe,QAAP,IAAoB;QAC5B,MAAMb,8BAA8B,CAAC;UACnCc,aAAa,EAAEjB,WAAW,CAACc,EADQ;UAEnCE;QAFmC,CAAD,CAApC;QAKAX,gBAAgB,CAAEa,SAAD,KAAgB,EAC/B,GAAGA,SAD4B;UACjB,CAAClB,WAAW,CAACc,EAAb,GAAkBE;QADD,CAAhB,CAAD,CAAhB;MAGD;IAdH,GACOhB,WAAW,CAACc,EADnB;MAAA;MAAA;MAAA;IAAA,QARF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AA2BD,CAnCM;KAAMf,e;AAqCb,MAAMQ,cAAc,GAAG,IAAIY,IAAI,CAACC,YAAT,CAAsB,OAAtB,EAA+B;EACpDC,KAAK,EAAE,UAD6C;EAEpDC,QAAQ,EAAE;AAF0C,CAA/B,CAAvB"},"metadata":{},"sourceType":"module"}